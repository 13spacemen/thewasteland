name: CI Suite
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

env: 
  target: i686-unknown-linux-gnu
  toolchain: stable-i686-unknown-linux-gnu

jobs:
  run_linters:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    name: Run Linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: $HOME/SpacemanDMM
          key: ${{ runner.os }}-spacemandmm
      - name: Install Tools
        run: |
          pip3 install setuptools
          bash tools/ci/install_node.sh
          bash tools/ci/install_spaceman_dmm.sh dreamchecker
          tools/bootstrap/python -c ''
      - name: Run Linters
        run: |
          bash tools/ci/check_filedirs.sh tgstation.dme
          bash tools/ci/check_changelogs.sh
          find . -name "*.php" -print0 | xargs -0 -n1 php -l
          find . -name "*.json" -not -path "*/node_modules/*" -print0 | xargs -0 python3 ./tools/json_verifier.py
          tgui/bin/tgui --lint
          bash tools/ci/check_grep.sh
          tools/bootstrap/python -m dmi.test
          tools/bootstrap/python -m mapmerge2.dmm_test
          ~/dreamchecker > ${GITHUB_WORKSPACE}/output-annotations.txt 2>&1
      - name: Annotate Lints
        uses: yogstation13/DreamAnnotate@v1
        if: always()
        with:
          outputFile: output-annotations.txt

  compile_all_maps:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    name: Compile Maps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: $HOME/BYOND
          key: ${{ runner.os }}-byond
      - name: Compile All Maps
        run: |
          bash tools/ci/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          python3 tools/ci/template_dm_generator.py
          tgui/bin/tgui --build
          bash tools/ci/dm.sh -DCIBUILDING -DCITESTING -DALL_MAPS tgstation.dme

  run_all_tests:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: $HOME/BYOND
          key: ${{ runner.os }}-byond

      - name: Setup database
        run: |
          sudo systemctl start mysql
          mysql -u root -proot -e 'CREATE DATABASE tg_ci;'
          mysql -u root -proot tg_ci < SQL/tgstation_schema.sql
          mysql -u root -proot -e 'CREATE DATABASE tg_ci_prefixed;'
          mysql -u root -proot tg_ci_prefixed < SQL/tgstation_schema_prefixed.sql

      - name: Cache bsql
        id: bsql_build_cache
        uses: actions/cache@v2
        with:
          path: ~/.byond/bin/libBSQL.so
          key: bsql

      - name: Install bsql dependencies
        if: steps.bsql_build_cache.outputs.cache-hit != 'true'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update || true
          sudo apt install libmariadb-client-lgpl-dev:i386
          sudo apt install libmariadbd-dev
          sudo apt install build-essential
          sudo apt install gcc-multilib
          sudo apt install g++-multilib
          sudo apt install gcc-4.8-multilib
          sudo apt install g++-4.8-multilib

      - name: Install bsql
        if: steps.bsql_build_cache.outputs.cache-hit != 'true'
        run: |
          bash tools/ci/build_bsql.sh
      
      - name: Install rust-g
        run: |
          sudo apt install libssl1.1:i386
          bash tools/ci/install_rust_g.sh

      - name: Checkout auxmos
        uses: actions/checkout@v2
        with:
          repository: 'Putnam3145/auxmos'
          ref: 'master'
          path: 'auxmos'

      - name: Cache auxmos cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: auxmos-registry-${{ hashFiles('auxmos/Cargo.lock') }}

      - name: Cache auxmos cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: auxmos-index-${{ hashFiles('auxmos/Cargo.lock') }}

      - name: Cache auxmos cargo build
        id: auxmos_build_cache
        uses: actions/cache@v2
        with:
          path: auxmos/target
          key: auxmos-build-target-${{ hashFiles('auxmos/Cargo.lock') }}
      
      - name: ldd auxmos
        if: steps.auxmos_build_cache.outputs.cache-hit == 'true'
        run: ldd auxmos/target/${{env.target}}/release/libauxmos.so

      - name: Install Ubuntu Deps
        if: steps.auxmos_build_cache.outputs.cache-hit != 'true' || steps.maptick_build_cache.outputs.cache-hit != 'true'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt install build-essential g++-multilib libc6-i386 libstdc++6:i386

      - uses: actions-rs/toolchain@v1
        if: steps.auxmos_build_cache.outputs.cache-hit != 'true'
        with:
          profile: minimal
          toolchain: ${{env.toolchain}}
          target: ${{env.target}}
          override: true

      - name: Build Auxmos
        if: steps.auxmos_build_cache.outputs.cache-hit != 'true'
        run: |
          cargo build --manifest-path auxmos/Cargo.toml --target=${{env.target}} --release --verbose
          ldd auxmos/target/${{env.target}}/release/libauxmos.so
          
      - name: Checkout auxtools_tg
        uses: actions/checkout@v2
        with:
          repository: 'willox/auxtools_tg'
          ref: '83b317412033f6ac28ac6c1ffbb08ef3d524202e'
          path: 'auxtools_tg'

      - name: Cache auxtools_tg cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: auxtools_tg-registry-${{ hashFiles('auxtools_tg/Cargo.lock') }}

      - name: Cache auxtools_tg cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: auxtools_tg-index-${{ hashFiles('auxtools_tg/Cargo.lock') }}

      - name: Cache auxtools_tg cargo build
        id: maptick_build_cache
        uses: actions/cache@v2
        with:
          path: auxtools_tg/target
          key: auxtools_tg-build-target-${{ hashFiles('auxtools_tg/Cargo.lock') }}
        
      - name: ldd auxtools_tg
        if: steps.maptick_build_cache.outputs.cache-hit == 'true'
        run: ldd auxtools_tg/target/${{env.target}}/release/libauxtools_tg.so

      - uses: actions-rs/toolchain@v1
        if: steps.maptick_build_cache.outputs.cache-hit != 'true'
        with:
          profile: minimal
          toolchain: ${{env.toolchain}}
          target: ${{env.target}}
          override: true

      - name: Build auxtools_tg
        if: steps.maptick_build_cache.outputs.cache-hit != 'true'
        run: |
          cargo build --manifest-path auxtools_tg/Cargo.toml --target=${{env.target}} --release --verbose
          ldd auxtools_tg/target/${{env.target}}/release/libauxtools_tg.so
          
      - name: Compile and run tests
        run: |
          bash tools/ci/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          tgui/bin/tgui --build
          bash tools/ci/dm.sh -DCIBUILDING tgstation.dme
          bash tools/ci/run_server.sh

  test_windows:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    name: Windows Build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Compile
        run: pwsh tools/ci/build.ps1
